name: trading-service

services:
  tradingservice-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    ports:
      - "${API_HTTP_PORT}:80"
      - "${API_HTTPS_PORT}:443"
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=${SSL_CERT_PATH}
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${SSL_CERT_PASSWORD}
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - Redis__ConnectionString=${REDIS_CONNECTION_STRING}
      - Redis__InstanceName=${REDIS_INSTANCE_NAME}
      - Kafka__BootstrapServers=${KAFKA_BOOTSTRAP_SERVERS}
      - Kafka__TradeExecutedTopic=${KAFKA_TRADE_EXECUTED_TOPIC}
      - Seq__ServerUrl=${SEQ_SERVER_URL}
    volumes:
      - ${SSL_CERT_HOST_PATH}:/app/devcert.pfx:ro
    networks:
      - trading-network

  tradingservice-consumer:
    build:
      context: ..
      dockerfile: docker/Dockerfile.consumer
    depends_on:
      kafka:
        condition: service_healthy
      seq:
        condition: service_started
    environment:
      - DOTNET_ENVIRONMENT=${DOTNET_ENVIRONMENT}
      - Kafka__BootstrapServers=${KAFKA_BOOTSTRAP_SERVERS}
      - Kafka__GroupId=${KAFKA_GROUP_ID}
      - Kafka__AutoOffsetReset=${KAFKA_AUTO_OFFSET_RESET}
      - Kafka__AllowAutoCreateTopics=${KAFKA_ALLOW_AUTO_CREATE_TOPICS}
      - Kafka__TradeExecutedTopic=${KAFKA_TRADE_EXECUTED_TOPIC}
      - Seq__ServerUrl=${SEQ_SERVER_URL}
    networks:
      - trading-network

  postgres:
    image: postgres:17.4
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - trading-network
  
  redis:
    image: redis:7.4
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
    networks:
      - trading-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - trading-network

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
      - "${KAFKA_HOST_PORT}:9093"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_CONNECT}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: ${KAFKA_HEALTHCHECK_INTERVAL}
      timeout: ${KAFKA_HEALTHCHECK_TIMEOUT}
      retries: ${KAFKA_HEALTHCHECK_RETRIES}

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_UI_CLUSTER_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_CLUSTERS_0_ZOOKEEPER=${ZOOKEEPER_CONNECT}
    depends_on:
      - kafka
    networks:
      - trading-network

  seq:
    image: datalust/seq:latest
    ports:
      - "${SEQ_API_PORT}:5341" # Entry point
      - "${SEQ_UI_PORT}:80"    # Web UI
    environment:
      - ACCEPT_EULA=Y
    networks:
      - trading-network

networks:
  trading-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
