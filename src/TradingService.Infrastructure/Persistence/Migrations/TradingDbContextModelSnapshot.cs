// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingService.Infrastructure.Persistence.Context;

#nullable disable

namespace TradingService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    partial class TradingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradingService.Domain.Entities.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("side");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.ToTable("trades", null, t =>
                        {
                            t.HasCheckConstraint("CK_Trade_Price_GreaterThanZero", "price > 0");

                            t.HasCheckConstraint("CK_Trade_Quantity_GreaterThanZero", "quantity > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("866bee10-bb20-4d6b-aab2-0df998d52b4f"),
                            ExecutedAt = new DateTime(2025, 3, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Price = 50.0m,
                            Quantity = 100,
                            Side = "Buy",
                            TotalAmount = 5000.0m
                        },
                        new
                        {
                            Id = new Guid("c4ae962b-1cf5-498e-92ed-2db397b883c0"),
                            ExecutedAt = new DateTime(2025, 3, 2, 14, 30, 0, 0, DateTimeKind.Utc),
                            Price = 75.0m,
                            Quantity = 50,
                            Side = "Sell",
                            TotalAmount = 3750.0m
                        },
                        new
                        {
                            Id = new Guid("1570b546-7456-4358-bcc3-38b08b428bde"),
                            ExecutedAt = new DateTime(2025, 3, 3, 9, 0, 0, 0, DateTimeKind.Utc),
                            Price = 25.0m,
                            Quantity = 200,
                            Side = "Buy",
                            TotalAmount = 5000.0m
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
